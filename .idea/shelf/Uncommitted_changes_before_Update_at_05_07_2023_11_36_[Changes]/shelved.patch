Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\n/**\r\n * Assignments:\r\n * Write a class that simulates a stack\r\n * and a FIFO (first in first out) queue using generics and arrays.\r\n *\r\n * For the previous classes add the following operations: add, remove, get, list and isEmpty.\r\n * Create a User class that implements Comparable.\r\n *\r\n * Write a class that demonstrates how sorting works on an array of Users.\r\n * Using a HashMap collection implementation, create a dictionary console application.\r\n *\r\n * Read the word definitions from a JSON file on disk.\r\n * Chose the JSON structure and class model that best suites your approach.\r\n *\r\n * Write a method that can determine whether two lists are equal or not.\r\n * The lists will be considered equal if they contain the same elements, regardless of their order.\r\n */\r\n\r\n// Sorting an array of Users,\r\n// and in the next line I create two instances of the User class (user1 and user2) with different names.\r\n// Then, we call the compareUsers method, passing the two User objects as arguments.\r\n// The compareUsers method internally calls the compareTo method of the User class to compare the names of the users.\r\n// Finally, based on the comparison result, we print whether user1 comes before user2, comes after user2, or if they are equal.\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println(\"With this method I demonstrate the usage of the Stack class:\");\r\n\r\n        User[] users = {\r\n                new User(\"First User\"),\r\n                new User(\"Second User\"),\r\n                new User(\"Third User\"),\r\n                new User(\"Other User\"),\r\n                new User(\"This User\")\r\n        };\r\n\r\n        Arrays.sort(users);\r\n\r\n        for (User user : users) {\r\n            System.out.println(user.getName());\r\n        }\r\n\r\n        User user1 = new User(\"Name as User\");\r\n        User user2 = new User(\"You as User\");\r\n\r\n        int result = ListEquality.compareUsers(user1, user2);\r\n        if (result < 0) {\r\n            System.out.println(user1.getName() + \" comes before \" + user2.getName());\r\n        } else if (result > 0) {\r\n            System.out.println(user1.getName() + \" comes after \" + user2.getName());\r\n        } else {\r\n            System.out.println(user1.getName() + \" and \" + user2.getName() + \" are equal\");\r\n        }\r\n\r\n        System.out.println(\"---------------------\");\r\n        System.out.println(\"With this method I demonstrate the usage of the Stack class:\");\r\n\r\n        Stack<Integer> stack = new Stack<>();\r\n        stack.push(1);\r\n        stack.push(2);\r\n        stack.push(3);\r\n        stack.list(); // Display the elements in the stack\r\n\r\n        int poppedElement = stack.pop();\r\n        System.out.println(\"Popped element: \" + poppedElement);\r\n\r\n        int topElement = stack.get();\r\n        System.out.println(\"Top element: \" + topElement);\r\n\r\n        boolean isEmpty = stack.isEmpty();\r\n        System.out.println(\"Is the stack empty? \" + isEmpty); // isEmpty here will be returned as \"true\" or \"false\"\r\n\r\n        System.out.println(\"---------------------\");\r\n        System.out.println(\"With this method I demonstrate the usage of the Queue class:\");\r\n\r\n        Queue<Integer> queue = new Queue<>();\r\n        queue.add(1);\r\n        queue.add(2);\r\n        queue.add(3);\r\n        System.out.println(\"Queue elements are: \");\r\n        queue.list(); // Display the elements in the queue\r\n\r\n        int removedElement = queue.remove();\r\n        System.out.println(\"Removed element: \" + removedElement);\r\n\r\n        int frontElement = queue.get();\r\n        System.out.println(\"Front element: \" + frontElement);\r\n\r\n        System.out.println(\"Queue elements after removal:\");\r\n        queue.list();\r\n\r\n//        boolean isEmpty = queue.isEmpty();\r\n        System.out.println(\"Is the queue empty? \" + isEmpty); // isEmpty here will be returned as \"true\" or \"false\"\r\n\r\n        System.out.println(\"---------------------\");\r\n        System.out.println(\"With this method I demonstrate the usage of the ListEquality class:\");\r\n\r\n        List<Integer> list1 = new ArrayList<>(); // creating a list1 with some values of type int to be compared with a similar list2\r\n        list1.add(1);\r\n        list1.add(2);\r\n        list1.add(3);\r\n\r\n        List<Integer> list2 = new ArrayList<>(); // list2\r\n        list2.add(1);\r\n        list2.add(2);\r\n        list2.add(3);\r\n\r\n        boolean isEqual = ListEquality.areListsEqual(list1, list2);\r\n        // If list one and list two are equal will return true, otherwise is false\r\n        System.out.println(\"Are the lists equal? \" + isEqual); // isEqual here will be returned as \"true\" or \"false\"\r\n\r\n        System.out.println(\"---------------------\");\r\n        System.out.println(\"With this method I demonstrate the usage of the DictionaryApp class:\");\r\n\r\n        DictionaryApp dictionaryApp = new DictionaryApp();\r\n\r\n        dictionaryApp.addDefinition(\"apple\", \"a fruit\");\r\n        dictionaryApp.addDefinition(\"car\", \"a vehicle\");\r\n        dictionaryApp.addDefinition(\"book\", \"a written work\");\r\n\r\n        String appleDefinition = dictionaryApp.getDefinition(\"apple\");\r\n        System.out.println(\"Definition of 'apple': \" + appleDefinition);\r\n\r\n        dictionaryApp.listAllWords();\r\n\r\n//        boolean isEmpty = dictionaryApp.isEmpty();\r\n        System.out.println(\"Is the dictionary empty? \" + isEmpty); // isEmpty here will be returned as \"true\" or \"false\"\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 545effdc51e017e9df2fab0c84397eba0ea18bcc)
+++ b/src/main/java/Main.java	(date 1688549707770)
@@ -127,8 +127,23 @@
 
         dictionaryApp.listAllWords();
 
-//        boolean isEmpty = dictionaryApp.isEmpty();
-        System.out.println("Is the dictionary empty? " + isEmpty); // isEmpty here will be returned as "true" or "false"
+        System.out.println("---------------------");
+        System.out.println("With this methods I demonstrate the usage of the JSON for User class:");
+        System.out.println("Json serialize User: ");
+
+        User user = new User("1"); // Create a User object with the desired user number
+        JSON.serializeUserToJson(user);
+        JSON.serializeUserToJson(user1);
+        JSON.serializeUserToJson(user2);
+        System.out.println("Json serialize User: ");
+
+        String json = "{\"userName\":\"1, Json String\"}"; // Replace with your actual JSON string
+        JSON.processUserJson(json);
+        String json2 = "{\"userName\":\"You as User, Json String\"}";
+        JSON.processUserJson(json2);
+        String json1 = "{\"userName\":\"Name as User, Json String\"}";
+        JSON.processUserJson(json1);
+
 
     }
 }
\ No newline at end of file
Index: src/main/java/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// User class implementing Comparable\r\npublic class User implements Comparable<User> {\r\n    private String name; // user as defined in main \"\"\r\n\r\n    public User(String name) {\r\n        this.name = name; // constructor\r\n    }\r\n\r\n    public String getName() {\r\n        return name; // getter\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(User otherUser) {\r\n        return this.name.compareTo(otherUser.getName());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/User.java b/src/main/java/User.java
--- a/src/main/java/User.java	(revision 545effdc51e017e9df2fab0c84397eba0ea18bcc)
+++ b/src/main/java/User.java	(date 1688549626358)
@@ -1,6 +1,7 @@
 // User class implementing Comparable
 public class User implements Comparable<User> {
     private String name; // user as defined in main ""
+    public User(){} // default constructor
 
     public User(String name) {
         this.name = name; // constructor
Index: src/main/java/JSON.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/JSON.java b/src/main/java/JSON.java
new file mode 100644
--- /dev/null	(date 1688549397303)
+++ b/src/main/java/JSON.java	(date 1688549397303)
@@ -0,0 +1,37 @@
+import com.fasterxml.jackson.databind.ObjectMapper;
+public class JSON {
+    private final ObjectMapper objectMapper = new ObjectMapper();
+
+    public String serializeUser(User user) {
+        try {
+            return this.objectMapper.writeValueAsString(user);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "";
+        }
+    }
+
+    public User deserializeUser(String jsonRepresentation) {
+        try {
+            return (User) this.objectMapper.readValue(jsonRepresentation, User.class);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return new User("");
+        }
+    }
+
+    public static void serializeUserToJson(User user) {
+        JSON jsonParser = new JSON();
+        String json = jsonParser.serializeUser(user);
+        System.out.println("Serialized JSON:\n" + json);
+    }
+
+    public static void processUserJson(String json) {
+        JSON jsonParser = new JSON();
+        User user = jsonParser.deserializeUser(json);
+        // Perform further processing with the user object
+        String userName = user.getName();
+        System.out.println("User Name: " + userName); // Accessing the user number and printing it
+    }
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>androidFileDecryptor</groupId>\r\n    <artifactId>Stack</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>17</maven.compiler.source>\r\n        <maven.compiler.target>17</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 545effdc51e017e9df2fab0c84397eba0ea18bcc)
+++ b/pom.xml	(date 1688548380688)
@@ -13,5 +13,12 @@
         <maven.compiler.target>17</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
+    <dependencies>
+        <dependency>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+            <version>2.12.5</version>
+        </dependency>
+    </dependencies>
 
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"df02f9df-ce83-42eb-ad5b-b51647bd96ca\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Main.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Queue.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Queue.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/Stack.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/Stack.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"PREVIOUS_COMMIT_AUTHORS\">\r\n      <list>\r\n        <option value=\"Lajos Bogdan, Sipos &lt;74930721+tra-la-la-la@users.noreply.github.com&gt;\" />\r\n      </list>\r\n    </option>\r\n    <option name=\"PUSH_TAGS\">\r\n      <GitPushTagMode>\r\n        <option name=\"argument\" value=\"--tags\" />\r\n        <option name=\"title\" value=\"All\" />\r\n      </GitPushTagMode>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2RxXkkZYUm8zZxw70UN2YxKnu3g\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n    <option name=\"showMembers\" value=\"true\" />\r\n    <option name=\"showVisibilityIcons\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"ListExample\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ListExample\" />\r\n      <module name=\"Stack\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"Stack\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.ListExample\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"df02f9df-ce83-42eb-ad5b-b51647bd96ca\" name=\"Changes\" comment=\"\" />\r\n      <created>1688192852991</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1688192852991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"1.1\">\r\n      <created>1688214754697</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688214754698</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"1.1\">\r\n      <created>1688215260150</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688215260150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"1.1\">\r\n      <created>1688215325803</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688215325803</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"1.1\">\r\n      <created>1688216038506</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688216038506</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"CUSTOM_BOOLEAN_PROPERTIES\">\r\n                <map>\r\n                  <entry key=\"Show.Git.Branches\" value=\"false\" />\r\n                </map>\r\n              </option>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"1.1\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"1.1\" />\r\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"REFORMAT_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n    <option name=\"REARRANGE_BEFORE_PROJECT_COMMIT\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 545effdc51e017e9df2fab0c84397eba0ea18bcc)
+++ b/.idea/workspace.xml	(date 1688549707875)
@@ -5,10 +5,11 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="df02f9df-ce83-42eb-ad5b-b51647bd96ca" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/src/main/java/JSON.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Queue.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Queue.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/Stack.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/Stack.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/User.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -110,7 +111,14 @@
       <option name="project" value="LOCAL" />
       <updated>1688216038506</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="Update workspace.xml">
+      <created>1688546500333</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1688546500333</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -143,7 +151,8 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="1.1" />
-    <option name="LAST_COMMIT_MESSAGE" value="1.1" />
+    <MESSAGE value="Update workspace.xml" />
+    <option name="LAST_COMMIT_MESSAGE" value="Update workspace.xml" />
     <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
     <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
     <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
